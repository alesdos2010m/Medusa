diff --git a/hiseek/__pycache__/action.cpython-34.pyc b/hiseek/__pycache__/action.cpython-34.pyc
index fb026c1..616acae 100644
Binary files a/hiseek/__pycache__/action.cpython-34.pyc and b/hiseek/__pycache__/action.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/agent.cpython-34.pyc b/hiseek/__pycache__/agent.cpython-34.pyc
index db42a17..fa04cf8 100644
Binary files a/hiseek/__pycache__/agent.cpython-34.pyc and b/hiseek/__pycache__/agent.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/coord.cpython-34.pyc b/hiseek/__pycache__/coord.cpython-34.pyc
index 18ba250..42666fb 100644
Binary files a/hiseek/__pycache__/coord.cpython-34.pyc and b/hiseek/__pycache__/coord.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/experiment.cpython-34.pyc b/hiseek/__pycache__/experiment.cpython-34.pyc
index c60fdcc..a5a991c 100644
Binary files a/hiseek/__pycache__/experiment.cpython-34.pyc and b/hiseek/__pycache__/experiment.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/gamemap.cpython-34.pyc b/hiseek/__pycache__/gamemap.cpython-34.pyc
index 97c127f..ce30849 100644
Binary files a/hiseek/__pycache__/gamemap.cpython-34.pyc and b/hiseek/__pycache__/gamemap.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/graphics.cpython-34.pyc b/hiseek/__pycache__/graphics.cpython-34.pyc
index fad5176..f96ef68 100644
Binary files a/hiseek/__pycache__/graphics.cpython-34.pyc and b/hiseek/__pycache__/graphics.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/mapmanager.cpython-34.pyc b/hiseek/__pycache__/mapmanager.cpython-34.pyc
index 9d1568a..0eb764d 100644
Binary files a/hiseek/__pycache__/mapmanager.cpython-34.pyc and b/hiseek/__pycache__/mapmanager.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/percept.cpython-34.pyc b/hiseek/__pycache__/percept.cpython-34.pyc
index ebe0086..0d81097 100644
Binary files a/hiseek/__pycache__/percept.cpython-34.pyc and b/hiseek/__pycache__/percept.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/shapes.cpython-34.pyc b/hiseek/__pycache__/shapes.cpython-34.pyc
index 38a4c4a..23b4ea3 100644
Binary files a/hiseek/__pycache__/shapes.cpython-34.pyc and b/hiseek/__pycache__/shapes.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/simulator.cpython-34.pyc b/hiseek/__pycache__/simulator.cpython-34.pyc
index a541de0..f24a403 100644
Binary files a/hiseek/__pycache__/simulator.cpython-34.pyc and b/hiseek/__pycache__/simulator.cpython-34.pyc differ
diff --git a/hiseek/__pycache__/team.cpython-34.pyc b/hiseek/__pycache__/team.cpython-34.pyc
index 2b5137b..794391a 100644
Binary files a/hiseek/__pycache__/team.cpython-34.pyc and b/hiseek/__pycache__/team.cpython-34.pyc differ
diff --git a/hiseek/agent.py b/hiseek/agent.py
index 09ed31c..7c8001f 100644
--- a/hiseek/agent.py
+++ b/hiseek/agent.py
@@ -91,16 +91,6 @@ class HiderAgent(Agent):
 
 	__metaclass__ = ABCMeta
 
-	def __init__(self, agent_id, team, map_manager):
-		super(HiderAgent, self).__init__(agent_id, team, map_manager)
-	# 	self._caught = False
-		
-	# def set_caught(self):
-	# 	self._caught = True
-
-	# def is_caught(self):
-	# 	return self._caught
-
 	def agent_type(self):
 		return 'hider_agent'
 
@@ -117,9 +107,6 @@ class RandomHiderAgent(HiderAgent):
 		A hider which takes a random move each turn
 	'''
 
-	def __init__(self, agent_id, team, map_manager):
-		super(RandomHiderAgent, self).__init__(agent_id, team, map_manager)
-
 	def generate_messages(self):
 		pass
 
@@ -127,8 +114,7 @@ class RandomHiderAgent(HiderAgent):
 		pass
 
 	def select_action(self):
-		available_actions = list(action.Action)
-		self._action = random.choice(available_actions)
+		self._action = random.choice(action.Action.all_actions)
 
 	def clear_temporary_state(self):
 		pass
@@ -139,9 +125,6 @@ class RandomSeekerAgent(SeekerAgent):
 		A seeker which takes a random move each turn
 	'''
 
-	def __init__(self, agent_id, team, map_manager):
-		super(RandomSeekerAgent, self).__init__(agent_id, team, map_manager)
-
 	def generate_messages(self):
 		pass
 
@@ -149,8 +132,7 @@ class RandomSeekerAgent(SeekerAgent):
 		pass
 
 	def select_action(self):
-		available_actions = list(action.Action)
-		self._action = random.choice(available_actions)
+		self._action = random.choice(action.Action.all_actions)
 
 	def clear_temporary_state(self):
 		pass
@@ -203,8 +185,6 @@ class RandomSeekerCommanderAgent(RandomSeekerAgent):
 		super(RandomSeekerCommanderAgent, self).__init__(agent_id, team, map_manager)
 		self.__opening_positions = {}
 		self.__openings_created = False
-		self.__offset = 50
-
 
 	def get_opening_position(self, rank, idx):
 		assert(rank < self._team.get_ranks())
@@ -237,15 +217,26 @@ class RandomSeekerCommanderAgent(RandomSeekerAgent):
 			for j in range(rank_holders):
 				found_position = False
 				while not found_position:
-					x = random.randint(0, gamemap.get_map_width()) - self.__offset
-					y = random.randint(0, gamemap.get_map_height()) - self.__offset
-					position = coord.Coord(x, y)
+					position = coord.Coord(random.randint(0, gamemap.get_map_width()), random.randint(0, gamemap.get_map_height()))
 					within_obstacle = self.__check_within_obstacle(position)
 					already_occupied = self.__check_already_occupied(position)
 					if not within_obstacle and not already_occupied:
 						self.__opening_positions[(i, j)] = position
 						found_position = True
 
+class BayesianHiderAgent(HiderAgent):
+	def generate_messages(self):
+		pass
+
+	def analyze_messages(self):
+		pass
+
+	def select_action(self):
+		self._action = random.choice(action.Action.all_actions)
+
+	def clear_temporary_state(self):
+		pass
+
 
 class FidgetingHiderAgent(HiderAgent):
 	'''
diff --git a/hiseek/gamemap.py b/hiseek/gamemap.py
index 2396f98..aff6563 100644
--- a/hiseek/gamemap.py
+++ b/hiseek/gamemap.py
@@ -14,11 +14,10 @@ class PolygonMap(object):
 		self.__polygons = []
 		self.__boundary_polygon = None
 		self.__all_polygons = None # Includes all the obstacle polygons as well as boundary polygon
-
-		map_name = 'id_' + str(map_id) + '.polygons'
-		# print('Path:', map_name)
-		assert(os.path.isfile(map_name))
-		f = open(map_name, 'r')
+		self.__map_name = 'id_' + str(map_id) + '.polygons'
+		# print('Path:', self.__map_name)
+		assert(os.path.isfile(self.__map_name))
+		f = open(self.__map_name, 'r')
 		first = True
 		for line in f:
 			line.strip()
@@ -30,6 +29,10 @@ class PolygonMap(object):
 
 					points_tuple = (0, 0, self.__width, 0, self.__width, self.__height, 0, self.__height)
 					self.__boundary_polygon = shapes.Polygon(points_tuple)
+
+					offset = 10
+					# points_tuple = (offset, offset, self.__width - offset, offset, self.__width - offset, self.__height - offset, offset, self.__height-offset)
+					# self.__imaginary_boundary = shapes.Polygon(points_tuple)
 					first = False
 				else:
 					points_list = [int(point) for point in points_list]
@@ -57,6 +60,17 @@ class PolygonMap(object):
 	def get_boundary_polygon(self):
 		return self.__boundary_polygon
 
+	def get_map_name(self):
+		return self.__map_name
+
+	def check_boundary_collision(self, position):
+		'''
+			Retusn True if point collides with the boundary
+		'''
+		if self.__boundary_polygon.is_point_inside(position):
+			return False
+		return True
+
 	def check_obstacle_collision(self, position):
 		'''
 			Returns True if point collides(is inside) any
@@ -68,9 +82,6 @@ class PolygonMap(object):
 				return True
 		return False
 
-	def to_radians(degrees):
-		return math.pi * degrees / 180.0
-
 	def get_visibility_polygon(self, current_position, current_rotation, num_rays, visibility_angle):
 		# c = coord.Coord(self.x, self.y)
 		vis_points = [int(current_position.get_x()), int(current_position.get_y())]
@@ -78,9 +89,14 @@ class PolygonMap(object):
 		rotation = current_rotation - visibility_angle
 		offset = (visibility_angle * 2.0)/num_rays
 		while rotation < current_rotation + visibility_angle:
-			rotation_x = math.cos(PolygonMap.to_radians(-rotation))
-			rotation_y = math.sin(PolygonMap.to_radians(-rotation))
+			rotation_x = math.cos(coord.Coord.to_radians(-rotation))
+			rotation_y = math.sin(coord.Coord.to_radians(-rotation))
 			r = coord.Coord(current_position.get_x() + rotation_x, current_position.get_y() + rotation_y)
+			rotation += offset
+			if r.get_x() < 0 or r.get_x() > self.__width or r.get_y() < 0 or r.get_y() > self.__height:
+				vis_points.append(int(current_position.get_x()))
+				vis_points.append(int(current_position.get_y()))
+				continue
 			ray = shapes.Line(current_position, r)
 			# print('ray:', ray)
 			closest_intersect = None
@@ -94,17 +110,20 @@ class PolygonMap(object):
 					if not closest_intersect or intersect[1] < closest_intersect[1]:
 						closest_intersect = intersect
 
-			# print(closest_intersect[0])
 			
-			assert(closest_intersect)
+
+			if not closest_intersect:
+				print('Closest intersect not found')
+				print('From coordinate:', current_position)
+				print('Ray:', ray)
+				print('Segment:', polygon.get_line(i))
+				continue
+
 			vis_points.append(int(closest_intersect[0].get_x()))
 			vis_points.append(int(closest_intersect[0].get_y()))
 
-			rotation += offset
+			
 
 		vis_points_tuple = tuple(vis_points)
 		visibility_polygon = shapes.Polygon(vis_points_tuple)
 		return visibility_polygon
-
-
-
diff --git a/hiseek/test.py b/hiseek/test.py
index e07e213..6ef2693 100644
--- a/hiseek/test.py
+++ b/hiseek/test.py
@@ -1,10 +1,8 @@
-import matplotlib.path as mplPath
-import numpy as np
+import action
 
-poly = [190, 50, 500, 310]
-bbPath = mplPath.Path(np.array([[poly[0], poly[1]],
-                     [poly[1], poly[2]],
-                     [poly[2], poly[3]],
-                     [poly[3], poly[0]]]))
+k = [None for i in range(9)]
 
-print(bbPath.contains_point((200, 100))
\ No newline at end of file
+for i in range(9):
+   k[i] = action.Action.all_actions[i] + 10
+
+print(k)
\ No newline at end of file
